TODO

- Generar rocas cerca del jugador, con dirección hacia el centro de
  la pantalla para que sea desafiante. Hacer desaparecer las entidades
  cuando salgan fuera de la pantalla y reutilizar su ID.

- Estudiar cómo implementar proyectiles.

- Estudiar sistema de colisiones. Esta parte es la más jodida de
  todas.  No solamente necesitamos un Bounding Volume Hierarchy para
  usarlo en la fase amplia, sino que también necesitamos implementar
  la fase estrecha con los pares de entidades detectados y evitar que
  se salten colisiones por fotograma (esto nunca lo pude arreglar).
  ¿Iterar unas cuantas veces? Eso es lo que vi en Bullet, pero, ¿por
  qué?

- ¿Implementar el sistema de coordenadas en 2D? Y no usar coordenadas
  de la pantalla (píxeles) sino más bien coordenadas en el mundo del
  juego y convertirlas a coordenadas de la pantalla. ¿Qué sistema usa
  SDL3?

- Mejorar experiencia del juego. Definir número de vidas, dificultad,
  gameplay, texturas, etc.

- ¿Dónde puedo usar múltiples hilos?

- Estudiar optimizaciones posibles en las funciones de sin, cos,
  etc. ¿Usar look-up tables?

- Implementar función log.

- Mejorar nombres de los tests.

- ¿Puedo implementar literales rad? ...

DONE

- Estudiar estructura de datos para representar una matriz (en este
  juego), implementar y probar.  No caer en la tentación de
  generalizar dicha matriz ya que no tiene sentido. Como el juego es
  en 2D, la estructura de datos puede ocupar menos memoria. Intentar
  implementar las operaciones o incluso la misma matriz ya usando
  SIMD.

- Preparar sistema de renderizado con las matrices. ¿Nos interesa usar
  el renderer de SDL3 o usamos nosotros OpenGL? Si usamos OpenGL,
  dependeríamos de la biblioteca glad para que se encargue de cargar
  los punteros a las funciones.

- Preparar estructura para representar geométricamente un triángulo
  (la nave). Preparar transforms en el renderer. Estos se tienen que
  actualizar después de que se procese la física.

- Implementar rotación de la nave, flechas izquierda y derecha para
  rotarla en sentido contrario a las agujas del reloj y en sentido de
  las agujas del reloj, respectivamente.

- Estudiar y preparar sistema de propulsión de la nave y física.

- Los cuaterniones no hacen falta para un juego en 2D. Overkill.

- Estudiar cómo implementar las rocas: con qué figura geométrica,
  spawn (aleatorio), velocidades, divisiones, etc.
